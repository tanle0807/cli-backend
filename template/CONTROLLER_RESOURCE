import { Controller, Post, UseAuth, Req, Request, Res, Response, HeaderParams, BodyParams, Get, PathParams, QueryParams } from '@tsed/common';
import { Docs } from '@tsed/swagger';
import Joi from '@hapi/joi';
import { Like } from 'typeorm';

import { VerificationJWT } from '{{path}}/middleware/auth/VerificationJWT';
import { Validator } from '{{path}}/middleware/validator/Validator';
import { {{Cap}} } from '{{path}}/entity/{{Cap}}';

@Controller("/{{controller}}")
@Docs("docs_{{doc}}")
export class {{Cap}}Controller {
    // =====================GET LIST=====================
    @Get('')
    @UseAuth(VerificationJWT)
    @Validator({
        page: Joi.number().min(0),
        limit: Joi.number().min(0)
    })
    async findAll(
        @HeaderParams("token") token: string,
        @QueryParams("page") page: number,
        @QueryParams("limit") limit: number,
        @QueryParams("search") search: string = "",
        @Req() req: Request,
        @Res() res: Response
    ) {
        const where = {
            title: Like(`%${search}%`),
        }

        let [{{camel}}, total] = await {{Cap}}.findAndCount({
            skip: (page - 1) * limit,
            take: limit,
            where,
            order: { id: "DESC" },
        })

        return res.sendOK({ data: {{camel}}, total }, "Success")
    }

    // =====================GET ITEM=====================
    @Get('/:{{camel}}Id')
    @UseAuth(VerificationJWT)
    @Validator({
        {{camel}}Id: Joi.number().required(),
    })
    async findOne(
        @Req() req: Request,
        @Res() res: Response,
        @HeaderParams("token") token: string,
        @PathParams("{{camel}}Id") {{camel}}Id: number,

    ) {
        {{camel}}Id = Number({{camel}}Id)
        let {{camel}} = await {{Cap}}.findOneOrThrowId({{camel}}Id)
        return {{camel}}
    }

    // =====================CREATE ITEM=====================
    @Post('')
    @UseAuth(VerificationJWT)
    @Validator({
        {{camel}}: Joi.required(),
    })
    async create(
        @Req() req: Request,
        @Res() res: Response,
        @HeaderParams("token") token: string,
        @BodyParams("{{camel}}") {{camel}}: {{Cap}},
    ) {
        await {{camel}}.save()
        return { id: {{camel}}.id }
    }

    // =====================UPDATE ITEM=====================
    @Post('/:{{camel}}Id/update')
    @UseAuth(VerificationJWT)
    @Validator({
        {{camel}}: Joi.required(),
        {{camel}}Id: Joi.number().required()
    })
    async update(
        @Req() req: Request,
        @Res() res: Response,
        @HeaderParams("token") token: string,
        @BodyParams("{{camel}}") {{camel}}: {{Cap}},
        @PathParams("{{camel}}Id") {{camel}}Id: number,
    ) {
        {{camel}}Id = Number({{camel}}Id)
        // This will check and throw error if not exist 
        await {{Cap}}.findOneOrThrowId({{camel}}Id)
        {{camel}}.id = {{camel}}Id
        await {{camel}}.save()
        return { id: {{camel}}.id }
    }

}
